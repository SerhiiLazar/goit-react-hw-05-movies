{"version":3,"file":"static/js/527.e03eb75a.chunk.js","mappings":"uRAGMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAe,mCAAG,oGACJD,EAAAA,EAAAA,IAAA,sCAAyCD,IADrC,cACrBG,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qDAKfC,EAAa,mCAAG,WAAMC,GAAN,uFACFL,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,4DAA8FM,IAD5F,cACnBH,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKbG,EAAe,mCAAG,WAAMC,GAAN,uFACJP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,oBAAkCR,EAAlC,oBADI,cACrBG,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfK,EAAe,mCAAG,WAAMD,GAAN,uFACJP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,4BAA0CR,EAA1C,oBADI,cACrBG,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qD,0KClBfM,EAAOC,EAAAA,EAAAA,KAAH,sBAEJC,EAAYD,EAAAA,EAAAA,GAAH,mUAcTE,EAAYF,EAAAA,EAAAA,GAAH,8CAITG,EAAYH,EAAAA,EAAAA,IAAH,2EAMTI,GAAUJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,4N,kBC1BPM,EAAMN,EAAAA,EAAAA,KAAH,sJAQHO,EAAQP,EAAAA,EAAAA,MAAH,+FAMLQ,GAAOR,EAAAA,EAAAA,GAAOS,EAAAA,IAAPT,CAAH,gFAMJU,EAASV,EAAAA,EAAAA,OAAH,iU,SCrBNW,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACI,UAACN,EAAD,CAAKM,SAAUA,EAAf,WACI,SAACL,EAAD,CACIM,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,YAAU,EACVC,YAAY,mBAEhB,SAACP,EAAD,CAAQI,KAAK,SAAb,UACI,SAACN,EAAD,QAIf,ECoDD,EA9De,WAAO,IAAD,EACjB,GAA0BU,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAS,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,IAE/CC,EAAAA,EAAAA,YAAU,WAAM,wCAGZ,6GAE4BC,EAAAA,GAAkBH,GAF9C,UAGoC,KADtBP,EAFd,QAGkBW,cAHlB,uBAIYC,MAAM,QAJlB,0BAQQX,EAASD,EAAMa,SARvB,kDAUQD,MAAM,WAVd,2DAHY,sBACY,KAArBL,EAAUO,QADD,mCAiBZC,EACH,GAAE,CAACR,IAgBJ,OACI,UAAC3B,EAAD,YACI,SAACY,EAAD,CAAWC,SAhBF,SAAAuB,GACbA,EAAEC,iBACF,IAAMC,EAASF,EAAEG,cAEyB,KAAvCD,EAAOE,SAAS5C,MAAM6C,MAAMP,QAM/BV,EAAgB,CAAE5B,MAAO0C,EAAOE,SAAS5C,MAAM6C,QAC/CH,EAAOI,SANHV,MAAM,oDAOb,IAKQZ,IACG,SAAClB,EAAD,UACKkB,EAAMuB,KAAI,gBAAE7C,EAAF,EAAEA,GAAI8C,EAAN,EAAMA,MAAOC,EAAb,EAAaA,YAAb,OACP,SAAC1C,EAAD,WACI,UAACE,EAAD,CAASyC,GAAE,UAAKhD,GAAMiD,MAAO,CAAEC,KAAMvB,GAArC,WACA,SAACrB,EAAD,CACI6C,IAAG,yCAAoCJ,GACvCK,IAAKN,IAEJA,MANO9C,EADT,QAe9B,C","sources":["api/api.js","pages/Movies/Movies.styled.jsx","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst API_KEY = '425e30ddd9895d0b97d51a8502562e6a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMoviTrending = async() => {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n}\n\nexport const getMoviSearch = async query => {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n    return response.data;\n}\n\nexport const getMovieDetails = async id => {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieCredits = async id => {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieReviews = async id => {\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n\n\n\n","import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Main = styled.main``;\n\nexport const MovieList = styled.ul`\ndisplay: grid;\nmax-width: calc(100vw - 48px);\ngrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\ngrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\ngrid-gap: 16px;\nmargin-top: 0;\nmargin-bottom: 0;\npadding: 0;\nlist-style: none;\nmargin-left: auto;\nmargin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\nmargin-bottom: 10px;\n`;\n\nexport const PosterImg = styled.img`\nmargin-bottom: 5px;\nwidth: 300px;\nheight: auto;\n`;\n\nexport const NavItem = styled(NavLink)`\nlist-style: none;\ncolor: blue;\ntext-decoration: none;\n\ndisplay:flex;\nflex-direction: column;\nalign-items: center;\n\n:hover:not(.active),\n:focus-visible:not(.active) {\n    color: red;\n}\n`;","import styled from \"@emotion/styled\";\nimport { HiSearch } from \"react-icons/hi\";\n\nexport const Box = styled.form`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n`;\n\nexport const Button = styled.button`\nposition: relative;\ndisplay: flex;\nwidth: 50px;\njustify-content: center;\nalign-items: center;\n/* margin: 0; */\nmargin-left: 5px;\n/* padding: 0; */\nborder-radius: 20%;\nheight: 40px;\nborder: none;\n\n:hover:not(.active),\n  :focus-visible:not(.active) {\n    background-color: orangered;\n`;","import { Box, Input, Icon, Button } from \"./SearchBox.styled\";\n\nexport const SearchBox = ({ onSubmit }) => {\n    return (\n        <Box onSubmit={onSubmit}>\n            <Input\n                name=\"query\"\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocuse\n                placeholder=\"Search movies\">\n            </Input>\n            <Button type=\"submit\">\n                <Icon />\n            </Button>\n        </Box>\n    )\n}","import {useSearchParams, useLocation} from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport {Main, MovieList, MovieItem, PosterImg, NavItem} from './Movies.styled';\nimport * as API from '../../api/api';\nimport {SearchBox} from '../../components/SearchBox/SearchBox';\n\n\nconst Movies = () => {\n    const [movie, setMovie] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const movieName = searchParams.get('query') ?? '';\n\n    useEffect(() => {\n        if(movieName.trim() === '') return;\n\n        async function fetchSearchMovie() {\n            try{\n                const movie = await API.getMoviSearch(movieName);\n                if (movie.total_results === 0){\n                    alert('worn')\n\n                    return;\n                }\n                setMovie(movie.results);\n            } catch (error) {\n                alert('worning');\n            }\n        }\n\n        fetchSearchMovie();\n    }, [movieName]);\n\n    const onSubmit = e => {\n        e.preventDefault();\n        const search = e.currentTarget;\n\n        if(search.elements.query.value.trim() === ''){\n            alert('Nothing entered in the search field, please enter');\n        return;\n        }\n\n\n        setSearchParams({ query: search.elements.query.value});\n        search.reset();\n    }\n\n    return (\n        <Main>\n            <SearchBox onSubmit={onSubmit} />\n            {movie && (\n                <MovieList>\n                    {movie.map(({id, title, poster_path}) => (\n                        <MovieItem key={id}>\n                            <NavItem to={`${id}`} state={{ from: location }}>\n                            <PosterImg\n                                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                                alt={title}\n                                />\n                                {title}\n                            </NavItem>\n                        </MovieItem>\n                    ))}\n                </MovieList>\n            )}\n        </Main>\n    )\n}\n\nexport default Movies;"],"names":["API_KEY","axios","getMoviTrending","response","data","getMoviSearch","query","getMovieDetails","id","getMovieCredits","Main","styled","MovieList","MovieItem","PosterImg","NavItem","NavLink","Box","Input","Icon","HiSearch","Button","SearchBox","onSubmit","name","type","autoComplete","autoFocuse","placeholder","useState","movie","setMovie","useSearchParams","searchParams","setSearchParams","location","useLocation","movieName","get","useEffect","API","total_results","alert","results","trim","fetchSearchMovie","e","preventDefault","search","currentTarget","elements","value","reset","map","title","poster_path","to","state","from","src","alt"],"sourceRoot":""}