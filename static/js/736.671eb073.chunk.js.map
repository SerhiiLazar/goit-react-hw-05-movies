{"version":3,"file":"static/js/736.671eb073.chunk.js","mappings":"+SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAe,mCAAG,oGACND,EAAAA,EAAAA,IAAA,sCAAyCD,IADnC,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qDAKfC,EAAa,mCAAG,WAAMC,GAAN,uFACJL,EAAAA,EAAAA,IAAA,gCACID,EADJ,4DAC+DM,IAF3D,cACrBH,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,sDAObG,EAAe,mCAAG,WAAMC,GAAN,uFACNP,EAAAA,EAAAA,IAAA,iBACXO,EADW,oBACGR,EADH,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfK,EAAe,mCAAG,WAAMD,GAAN,uFACNP,EAAAA,EAAAA,IAAA,iBACXO,EADW,4BACWR,EADX,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfM,EAAe,mCAAG,WAAMF,GAAN,uFACNP,EAAAA,EAAAA,IAAA,iBACXO,EADW,4BACWR,EADX,2BADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD,uLC5BfO,EAAUC,EAAAA,EAAAA,QAAH,0BAIPC,EAAOD,EAAAA,EAAAA,GAAH,iUAaJE,EAAOF,EAAAA,EAAAA,GAAH,qFAKJG,EAAMH,EAAAA,EAAAA,IAAH,2EAMHI,EAAYJ,EAAAA,EAAAA,EAAH,sBAETK,EAAYL,EAAAA,EAAAA,EAAH,sBAETM,EAAkBN,EAAAA,EAAAA,EAAH,sB,kBC9BfO,EAAO,WAClB,OAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQd,GAAOe,EAAAA,EAAAA,MAAPf,GAcR,OAZAgB,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAE+BC,EAAAA,GAAoBjB,GAFnD,OAEUa,EAFV,OAGIC,EAAgBD,GAHpB,gDAKIK,MAAM,yCALV,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACnB,IAGFa,IACE,SAACV,EAAD,UACCU,EAAaO,KAAKC,OAAS,GAC5B,SAAChB,EAAD,UACGQ,EAAaO,KAAKE,KACf,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACE,UAACpB,EAAD,YACE,SAACC,EAAD,CACEoB,IACEH,EAAY,yCAC0BA,GAD1B,4EAIdI,IAAKH,KAEP,SAACjB,EAAD,UAAYiB,KACZ,SAAChB,EAAD,UAAYiB,MAVHH,EADb,OAgBF,SAACb,EAAD,qDAQT,EAED,G","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '425e30ddd9895d0b97d51a8502562e6a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMoviTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMoviSearch = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n","import styled from \"@emotion/styled\";\n\n\nexport const Section = styled.section`\n\n`;\n\nexport const List = styled.ul`\ndisplay: grid;\nmax-width: calc(100vw - 48px);\ngrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\ngrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\ngrid-gap: 16px;\nmargin-top: 0;\nmargin-bottom: 0;\npadding: 0;\nlist-style: none;\nmargin-left: auto;\nmargin-right: auto;`;\n\nexport const Link = styled.li`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;`;\n\nexport const Img = styled.img`\nmargin-bottom: 5px;\nwidth: 300px;\nheight: auto;\n`;\n\nexport const ActorName = styled.p``;\n\nexport const Character = styled.p``;\n\nexport const ReviewsNotFound = styled.p``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Section, List, Link, Img, ActorName, Character, ReviewsNotFound } from './Cast.styled';\nimport * as API from '../../api/api';\n\nexport const Cast = () => {\n  const [movieCredits, setMovieCredits] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieCredits() {\n      try {\n        const movieCredits = await API.getMovieCredits(id);\n        setMovieCredits(movieCredits);\n      } catch (error) {\n        alert('Oops something went wrong, try again.');\n      }\n    }\n    fetchMovieCredits();\n  }, [id]);\n\n  return (\n    movieCredits && (\n      <Section>\n      {movieCredits.cast.length > 0 ? (\n      <List>\n        {movieCredits.cast.map(\n            ({ cast_id, profile_path, name, character }) => (\n              <Link key={cast_id}>\n                <Img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : `https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png`\n                  }\n                  alt={name}\n                />\n                <ActorName>{name}</ActorName>\n                <Character>{character}</Character>\n              </Link>\n            ))}\n      </List> \n      ) : (\n          <ReviewsNotFound>\n            We don`t have any cast for this movie\n          </ReviewsNotFound>\n          )}\n    </Section>\n    )\n    \n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","getMoviTrending","response","data","getMoviSearch","query","getMovieDetails","id","getMovieCredits","getMovieReviews","Section","styled","List","Link","Img","ActorName","Character","ReviewsNotFound","Cast","useState","movieCredits","setMovieCredits","useParams","useEffect","API","alert","fetchMovieCredits","cast","length","map","cast_id","profile_path","name","character","src","alt"],"sourceRoot":""}